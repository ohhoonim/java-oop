package oopBasic;

import oopBasic.machine.Car;

public class EncapsulationMain {
   public static void main(String[] args) {
      // 1. 개념

      // 캡슐화는 객체의 상태와 행위를 한곳에 모아두는 것을 말한다. 
      // 
      // java에서는 필드와 메서드를 클랙스에 묶어놓는 것으로 
      // 객체지향 프로그래밍의 캡슐화를 제공한다. 
      //
      // 여러 객체가 연결되어있는 경우 객체별로 여러 상태가 연결된 상태로
      // 존재하기 때문에  코드가 난해해지는 원인이 되기도 하므로 
      // 객체지향프로그래밍의 무용론을 주장하는 개발자들이 많다.

      // 2. 접근한정자

      // 캡슐화와 함께 사용되는 개념에 은닉이 있다. 
      // class에서 필드와 메서드는 java에서는 멤버라고 불리고 있으며,
      // 외부 클래스에서 이 멤버에 접근할 수 있는 권한에 대한 키워드를
      // 제공하는데 이를  '접근한정자'라고 한다.

      Car myCar = new Car("23ab3456", "소형", 12.3);

      // public
      // 외부 어디에서는 접근 가능하다. 

      // private
      // 외부에서 접근 불가능하다. 

      // protected
      // 동일패키지 또는 상속하는 자식 클래스에서 접근 가능하다.

      // default
      // 키워드를 아무것도 붙이지 않은 것을 말한다.
      // 동일 패키지에서 접근가능하다.

   } 
}
